{
	"info": {
		"_postman_id": "03153ccd-c178-4ac1-86f2-2ac56d3fc7b0",
		"name": "GithubDemo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "Get user`s repos",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/user",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" let body = pm.response.json();\r",
									" //console.log(body)\r",
									"\r",
									"pm.test(\"Check status code\",()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Check body lenght\", function (){\r",
									"  pm.expect(body.url, \"Body URL\").to.equal(\"https://api.github.com/repos/velichakarova/Postman/issues/1\")\r",
									"})\r",
									"pm.test(\"Check number\", function (){\r",
									"  pm.expect(body.number, \"Body number\").to.equal(1)\r",
									"})\r",
									"pm.test(\"Check ID\", function (){\r",
									"    pm.expect(body.id,\"Body ID property\").to.equal(1241625774)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues/{{issue_number}}",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"{{issue_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ceck status code\", function(){\r",
									"  pm.expect(pm.response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Ceck status\", function(){\r",
									"  pm.expect(pm.response.status).to.equal('OK')\r",
									"})\r",
									"\r",
									"pm.test(\"Ceck status code ES6\", ()=>{\r",
									"  pm.expect(pm.response.code, \"Status Code\").to.equal(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Check status code other way\", function (){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"pm.test(\"Check body lenght\", function (){\r",
									"    var body = pm.response.json();\r",
									"   \r",
									"   console.log(body.url)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Create new repository",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n        \"name\": \"Demo from Postman\", \r\n        \"auto_init\": true, \r\n        \"private\": false, \r\n        \"gitignore_template\": \"nanoc\" \r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" let body = pm.response.json();\r",
									" console.log(body)\r",
									" let number = body.number\r",
									" console.log(number)\r",
									"\r",
									"pm.test(\"Check status code\",()=>{\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"pm.test(\"Ceck status\", function(){\r",
									"  pm.expect(pm.response.status).to.equal('Created')\r",
									"})\r",
									"\r",
									"pm.test(\"Check body lenght\", function (){\r",
									"  pm.expect(body.url, \"Body URL\").to.equal(\"https://api.github.com/repos/velichakarova/Postman/issues/\"+ number)\r",
									"})\r",
									"pm.test(\"Check number\", function (){\r",
									"  pm.expect(body.number, \"Body number\").to.be.greaterThan(1)\r",
									"})\r",
									"pm.test(\"Check ID\", function (){\r",
									"    pm.expect(body.id,\"Body ID property\").to.be.greaterThan(1)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PATCH",
			"item": [
				{
					"name": "Update an issue",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"state\":\"closed\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues/{{issue_number}}",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"{{issue_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Lock the issue",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"lock_reason\":\"resolved\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues/{{issue_number}}/lock",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"{{issue_number}}",
								"lock"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "UnLock the issue",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"lock_reason\":\"resolved\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues/{{issue_number}}/lock",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"{{issue_number}}",
								"lock"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}